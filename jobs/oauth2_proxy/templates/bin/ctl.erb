#!/usr/bin/env bash
#
set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Load job properties
source /var/vcap/jobs/oauth2_proxy/data/properties.sh

# Setup env vars and folders for the ctl script
source /var/vcap/jobs/oauth2_proxy/packages/bosh-helpers/setup.sh "oauth2_proxy"

# Load function lib (alway before setup, there are some global variables needed)
source /var/vcap/jobs/oauth2_proxy/packages/bosh-helpers/lib.sh

case ${1:-help} in
  start)
    echon_log "Starting $COMPONENT: "
    pid_guard $PIDFILE $COMPONENT
    # Load python library path for dynamic libs
    ldconf "$LD_LIBRARY_PATH"
    (
        {
            setcap 'cap_net_bind_service=+ep' $(readlink -nf $(which oauth2_proxy))
            exec chpst -v -u vcap:vcap oauth2_proxy \
              --http-address="<%= p('oauth2_proxy.http_address') %>" \
              --set-xauthrequest="true" \
              --request-logging="true" \
              --upstream="<%= p('oauth2_proxy.upstream') %>" \
              <% p('oauth2_proxy.email_domain', []).each do |email| %>--email-domain="<%= email %>" \<% end %>
              --cookie-secret="<%= p('oauth2_proxy.cookie_secret') %>" \
              --cookie-refresh="<%= p('oauth2_proxy.cookie_refresh') %>" \
              --cookie-secure="<%= p('oauth2_proxy.cookie_secure') %>" \
              --client-id="<%= p('oauth2_proxy.client_id') %>" \
              --client-secret="<%= p('oauth2_proxy.client_secret') %>" \
              --cookie-name="<%= p('oauth2_proxy.cookie_name') %>" \
              --redirect-url="<%= p('oauth2_proxy.redirect_url') %>"
        } >>$LOG_DIR/$COMPONENT.stdout.log \
        2>>$LOG_DIR/$COMPONENT.stderr.log
    ) &
    echo $! > $PIDFILE
    echo "$(<${PIDFILE}). Done"
    ;;
  stop)
    echo_log "Stopping $COMPONENT: $(<${PIDFILE}). "
    kill_and_wait $PIDFILE
    rm -f $PIDFILE
    echo_log "Done"
    ;;
  *)
    echo "Usage: $0 {start|stop}"
    ;;
esac
exit 0
