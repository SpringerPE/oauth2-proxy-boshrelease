##-------------------------
# Uaa conf. Parses uaa logs
##-------------------------

filter {
    if [@source][component] == "vcap.uaa" {
        mutate {
          # remove vcap. prefix
          replace => { "[@source][component]" => "uaa" }
          replace => { "@type" => "uaa" }
          add_tag => "uaa"
        }
        grok {
          match => { "@message" => "\[%{TIMESTAMP_ISO8601:[uaa][timestamp]}\]%{SPACE}uaa%{SPACE}-%{SPACE}%{NUMBER:[uaa][pid]:int}%{SPACE}\[%{DATA:[uaa][thread]}\]%{SPACE}....%{SPACE}%{LOGLEVEL:@level}%{SPACE}---%{SPACE}%{DATA:[uaa][log_category]}:%{SPACE}%{GREEDYDATA:@message}"}
          overwrite => ["@message", "@level"] # @message, @level
          tag_on_failure => "fail/cloudfoundry/platform-uaa/grok"
        }
        if [uaa][log_category] == "Audit" {
            mutate {
              replace => { "@type" => "uaa-audit" }
              add_tag => "audit"
            }
            # ---- Additional parsing: Audit events
            grok {
              match => { "@message" => "(?<uaa_audit_message>(%{WORD:[uaa][audit][type]}%{SPACE}\('%{DATA:[uaa][audit][data]}'\))):%{SPACE}principal=%{DATA:[uaa][audit][principal]},%{SPACE}origin=\[%{DATA:[uaa][audit][origin]}\],%{SPACE}identityZoneId=\[%{DATA:[uaa][audit][identity_zone_id]}\]"}
              tag_on_failure => "fail/cloudfoundry/platform-uaa/audit/grok"
            }
            if !("fail/cloudfoundry/platform-uaa/audit/grok" in [tags]) {
                # Audit @message
                mutate {
                  rename => { "uaa_audit_message" => "@message" }
                }
                # extract audit_event_remote_address and geoip it
                if "PrincipalAuthenticationFailure" == [uaa][audit][type] {
                    mutate {
                      add_field => { "[uaa][audit][remote_address]" => "%{[uaa][audit][origin]}" }
                    }
                }
                if [uaa][audit][origin] =~ /remoteAddress=/ {
                    grok {
                      match => { "[uaa][audit][origin]" => "remoteAddress=%{IP:[uaa][audit][remote_address]}" }
                    }
                }
                if [uaa][audit][remote_address] {
                   geoip {
                     source => "[uaa][audit][remote_address]"
                   }
                }
                # split origin
                mutate {
                  split =>  { "[uaa][audit][origin]" => ", " }
                }
            }
        }
    }
}
