##----------------
# Parsing RTR logs
##----------------

filter {
    if ([@type] == "LogMessage" and [@source][type] == "rtr") {

        mutate {
            add_tag => [ "rtr" ]
        }

        grok {
          match => { "@message" => "%{HOSTNAME:[rtr][hostname]} - \[(?<rtr_time>%{YEAR}-%{MONTHNUM}-%{MONTHDAY}T%{TIME}+%{INT})\] \"%{WORD:[rtr][verb]} %{URIPATHPARAM:[rtr][path]} %{PROG:[rtr][http_spec]}\" %{BASE10NUM:[rtr][status]:int} %{BASE10NUM:[rtr][request_bytes_received]:int} %{BASE10NUM:[rtr][body_bytes_sent]:int} \"%{GREEDYDATA:[rtr][referer]}\" \"%{GREEDYDATA:[rtr][http_user_agent]}\" \"%{IPORHOST:[rtr][src][host]}:%{POSINT:[rtr][src][port]:int}\" \"%{IPORHOST:[rtr][dst][host]}:%{POSINT:[rtr][dst][port]:int}\" x_forwarded_for:\"%{GREEDYDATA:[rtr][x_forwarded_for]}\" x_forwarded_proto:\"%{GREEDYDATA:[rtr][x_forwarded_proto]}\" vcap_request_id:\"%{NOTSPACE:[rtr][vcap_request_id]}\" response_time:%{NUMBER:[rtr][response_time_sec]:float} app_id:\"%{NOTSPACE:[rtr][app][id]}\" app_index:\"%{BASE10NUM:[rtr][app][index]:int}\" %{GREEDYDATA:[@metadata][rtr_extra]}" }
          tag_on_failure => [ "fail/cloudfoundry/logMessage/rtr/grok" ]
        }

        if !("fail/cloudfoundry/logMessage/rtr/grok" in [tags]) {
            # Set [rtr][timestamp]
            mutate {
              rename => { "rtr_time" => "[rtr][timestamp]" }
            }
            # Set [rtr][x_forwarded_for]
            mutate {
                gsub => ["[rtr][x_forwarded_for]","[\s\"]",""]  # remove quotes and whitespace
                split => ["[rtr][x_forwarded_for]", ","]        # format is client, proxy1, proxy2 ...
            }
            # Set [rtr][remote_addr]
            mutate {
              add_field => ["[rtr][remote_addr]", "%{[rtr][x_forwarded_for][0]}"]
            }
            if [rtr][remote_addr] =~ /([0-9]{1,3}\.){3}[0-9]{1,3}/ {
                geoip {
                  source => "[rtr][remote_addr]"
                }
            }
            # Set [rtr][response_time_ms]
            mutate {
              add_field => { "[rtr][response_time_ms]" => "%{[rtr][response_time_sec]}000" }
            }
            mutate {
              gsub => ["[rtr][response_time_ms]", "\.(\d)(\d)(\d)([\d]{0,3}).*","\1\2\3.\4"]
            }
            mutate {
              convert => { "[rtr][response_time_ms]" => "float" }
            }
            # Set @message
            mutate {
              replace => {"@message" => "%{[rtr][status]} %{[rtr][verb]} %{[rtr][path]} (%{[rtr][response_time_ms]} ms)"}
            }
            # Parsing extra headers like zipkin ...
            kv {
              source => "[@metadata][rtr_extra]"
              target => "[rtr][extra]"
              value_split => ":\\\""
              trim_value => "\\""
            }
            if [rtr][status] >= 400 {
                mutate {
                  replace => { "@level" => "ERROR" }
                }
            } else {
                mutate {
                  replace => { "@level" => "INFO" }
                }
            }
        }
    }
}
