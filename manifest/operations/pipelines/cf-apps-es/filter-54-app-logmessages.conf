##-----------------------------
## Parses LogMessage APP events
##-----------------------------

filter {
    if [@type] == "LogMessage" and [@source][type] == "app" {

        mutate {
            add_tag => [ "app" ]
        }

        # Parse application logs based on msg format.
        # Marks unknown format with [unknown_msg_format] tag.

        ## ---- Format 1: JSON
        if [@message] =~ /^\s*{.*}\s*$/ {                              # if it looks like JSON
            json {
              source => "@message"
              target => "app"
              add_tag => [ "json" ]
              tag_on_failure => [ "no_json" ]
            }
            if ("json" in [tags]) {
                # @level
                if [app][level] {
                    mutate {
                      replace => { "@level" => "%{[app][level]}" }
                    }
                }
                if [app][log_level] {
                    translate {
                      field => "[app][log_level]"
                      dictionary => [ "0", "DEBUG", "1", "INFO", "2", "ERROR", "3", "FATAL" ]
                      destination => "@level"
                      override => true
                      fallback => "%{[app][log_level]}"
                    }
                }
                # set @timestamp from event's timestamp if it is passed
                if [app][time] {
                    # if event's timestamp is not passed then we set @timestamp = event shipping time from firehose-to-syslog
                    date {
                      match => [ "[app][time]", "ISO8601" ]
                      tag_on_failure => [ "fail/app/json/time" ]
                    }
                }
                if [app][epoch] {
                    date {
                      match => [ "[app][epoch]", "UNIX", "UNIX_MS" ]
                      tag_on_failure => [ "fail/app/json/epoch" ]
                    }
                }
                if [app][timestamp] {
                    date {
                      match => [ "[app][timestamp]", "ISO8601", "UNIX", "UNIX_MS" ]
                      tag_on_failure => [ "fail/app/json/timestamp" ]
                    }
                }
            }
        ## ---- Format 2: "[CONTAINER] .." (Tomcat logs)
        } else if [@message] =~ /^\s*\[CONTAINER\]/ {
            # Tomcat specific parsing (in accordance with https://github.com/cloudfoundry/java-buildpack-support/blob/master/tomcat-logging-support/src/main/java/com/gopivotal/cloudfoundry/tomcat/logging/CloudFoundryFormatter.java)
            grok {
              match => { "@message" => "(?<app_logger>\[CONTAINER\]%{SPACE}%{NOTSPACE})%{SPACE}%{LOGLEVEL:@level}%{SPACE}%{GREEDYDATA:@message}" }
              overwrite => [ "@message", "@level" ]
              add_tag => [ "tomcat" ]
              tag_on_failure => [ "no_tomcat" ]
            }
            mutate {
              rename => { "app_logger" => "[app][logger]" }
            }

        ## ---- Format 3: Logback status logs
        } else {
            grok {
              match => { "@message" => "%{TIME} \|\-%{LOGLEVEL:@level} in %{NOTSPACE:[app][logger]} - %{GREEDYDATA:@message}" }
              overwrite => [ "@message", "@level" ]
              tag_on_failure => [ "unknown" ]
            }
        }
    }
}

